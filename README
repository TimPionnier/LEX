RUN
- `yacc -d yacc.y` to get y.tab.c and y.tab.h files (y.tab.h is required by lex.l for token definitions)
- `lex lex.l` to get lex.yy.c file
- `cc lex.yy.c y.tab.c` to compile and get a.out executable
- `./a.out to test`

OR RUN yacc -d yacc.y && lex lex.l && cc main.c && ./a.out input.txt

TO RUN ON WINDOWS:
- 'flex "fileName.l"'
- 'bison -d "fileName.y"'
- 'gcc -o "executableName.exe" "fileName.yy.c"

or run the batch file buildExe.bat

stmt:
  /*| IDENTIFIER '=' expr ';' { $$ = opr('=', 2, id($1), $3); }*/
  | WHILE '(' expr ')' stmt { $$ = opr(WHILE, 2, $3, $5); }
  | IF '(' expr ')' stmt %prec IFX { $$ = opr(IF, 2, $3, $5); }
  | IF '(' expr ')' stmt ELSE stmt { $$ = opr(IF, 3, $3, $5, $7); }
  | BEG NEWLINE stmt ',' NEWLINE END { $$ = opr(BEG, 1, $3); }
  /*| FOR VAR '=' INT TO INT DO stmt { $$ = opr(FOR, 4, id($2), $4, $6, $8); }*/
  | WHILE expr DO stmt { $$ = opr(WHILE, 2, $2, $4); }
  | DO stmt WHILE expr { $$ = opr(DO, 2, $2, $4); }
  /*| READ '(' basic_data_type ',' VAR ')' { $$ = opr(READ, 2, $3, id($5)); }
  | WRITE '(' basic_data_type ',' VAR ')' { $$ = opr(WRITE, 2, $3, id($5)); }*/
  | '{' stmt_list '}' { $$ = $2; }
  ;


stmt_list:
  stmt { $$ = $1; }
  | stmt_list stmt { $$ = opr(';', 2, $1, $2); }
  ;

function:
  FUNCTION STRING '(' declaration ')' ':' type_specifier NEWLINE stmt NEWLINE RETURN type_specifier { $$ = opr(FUNCTION, , $2, id($4), $9, id($12)); }
  ;